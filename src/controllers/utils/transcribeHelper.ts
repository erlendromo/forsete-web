import { ApiRoute, AllowedMimeType } from "../../config/constants.js";
import { getSelectedModel } from "../settingsController.js";

/**
 * Function to buld a transcription form.
 * @param file 
 * @returns the form
 */
function buildTranscriptionForm(file: File): FormData {
  const textModel = getSelectedModel("textrecognition");
  const lineModel = getSelectedModel("linesegmentation");

  const form = new FormData();
  form.append("file", file, file.name);
  form.append("textModel", textModel);
  form.append("lineModel", lineModel);

  return form;
}

/**
 * Parses a failed transcription API response and throws a descriptive Error.
 *
 * @param resp - The fetch Response object from the transcription endpoint.
 * @returns A Promise that always rejects with an Error containing either the API’s error message
 *          or a fallback of `statusText (status)`.
 * @throws {Error} Always throws with a message extracted from the response JSON or the status.
 */
async function handleTranscriptionError(resp: Response): Promise<never> {
  const err = await resp.json().catch(() => null);
  const msg = err?.error ?? `${resp.statusText} (${resp.status})`;
  throw new Error(msg);
}

/**
 * Sends an form file to the transcription API and returns its parsed JSON response.
 *
 * @param file - The image to be transcribed
 * @returns A Promise that resolves with the transcription result.
 * @throws {Error} If the server responds with a non-OK status, rethrows the error
 *                 generated by {@link handleTranscriptionError}, containing either
 *                 the server’s own error message or a fallback of `statusText (status)`.
 */
export async function transcribe(file: File): Promise<any> {
  const form = buildTranscriptionForm(file);
  const resp = await fetch(ApiRoute.Transcribe, {
    method: "POST",
    body: form,
  });

  if (!resp.ok) {
    await handleTranscriptionError(resp);
  }

  return resp.json();
}

/**
 * Checks if a file is a pdf. If the file is a pdf the it will send the file to the api
 * and make it a png. The function will return an image.
 *
 * @param file - The file to be checked to if it is an pdf.
 * @returns The file either as original or the converted one from pdf.
 * @throws {Error} If the PDF conversion request fails (non-OK status), with a message:
 *                 “Failed to convert PDF to PNG: {status} {statusText} {responseText}”.
 */
export async function ensurePng(file: File): Promise<File> {
  if (!file.name.toLowerCase().endsWith(".pdf")) return file;

  const formData = new FormData();
  formData.append("file", file);

  const response = await fetch(ApiRoute.PdfToImage, {
    method: "POST",
    body: formData,
  });

  if (!response.ok) {
    const msg = await response.text().catch(() => "");
    throw new Error(
      `Failed to convert PDF to PNG: ${response.status} ${response.statusText} ${msg}`
    );
  }

  const pngBlob = await response.blob();
  return new File([pngBlob], file.name.replace(/\.pdf$/i, ".png"), {
    type: AllowedMimeType.PNG,
  });
}
